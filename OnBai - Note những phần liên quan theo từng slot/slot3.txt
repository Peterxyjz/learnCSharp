//học về làm thư viên, document, expresstion , tham chiếu, dịch mã nguồn

I.Học về cách tạo thư viện trong C# và cách làm document cho thư viện cũng như có các hàm trong thư viên luôn
* Lưu ý phải chỉnh: chọn class (PROJECT) + chuột phải chọn Property ==> Tới đây quên rồi =)))

II. Khi hàm (method) chỉ có 1 lệnh thì ta được quyền viết tắt theo Expression Body:
EX: 
	static void PrintBMIString() => Console.WriteLine("BMI stands for Body Mass Index");
Nó giống Lamda expression nhưng hai thằng này là khác nhau

*Ôn lại chút về lamda (JAVA):
Trong java lamda được dùng để implement cho interface chuẩn (interface chỉ có 1 abstract method)

III. Quy tắt đặt tên:
+ Biến local thì đặt giống java - camel case notation
+ Tên hàm (method) thì đặt theo - pascal case notation

IV. Datatype (Integer):
- Giống java
- Các cấu trúc: for, while, do-while, if, switch: đều giống java

- Viết 1 số hàm cơ bản để ôn lại integer và các cú pháp
- Học thêm về var:
==> Var: là kĩ thuật khai báo biến không cần quan tâm datatype, C# tự suy ra datatype khi gán value lần đầu tiên được gán.
==> Kĩ thuật này được gọi là: type infferrent - suy luận kiểu
// Java cũng có var nhưng là bản jdk cao mới có

IV - DLL và mã nguồn
- DLL: DYNAMIC LINK LIBRARY - Thư viện, package, thư mục, namespacse chứa bên trong nhiều class/method để cung cấp tiện ích cho dân dev
Vd: Làm việc gì đó, chẳng hạn .dll để quản lí camera, .dll để móc xuống database

- DLL: Nó không phải là file nhị phân - Binary code mà là code/ mã trung tính, trung gian không gắn với 1 OS cụ thể, nó chạy chơi với runtime, runtime chơi với OS

- App chạy đa nền/ Platfrom independent, cross-platform bản chất là phải có thằng runtime gắn với OS/NỀN cụ thể
- PHẢI CÓ THẰNG RUNTIME GẮN VỚI OS/NỀN CỤ THỂ
- APP CHỈ CHƠI VỚI THANG RUNTIME
- APP CHỈ CHOI VOI THANG RUNTIME	--MACOS
					--Linux
					--Windows
- APP TRUNG TÍNH - CODE TRUNG TÍNH NAY GỌI LA MSIL LANGUAGE, IL
					MICROSOF INTERMEDIATE LANGUAGE

- Từ Msil -> back ngược lại .CS Source code gốc dev viết ra
		Reverse eningeering - dịch ngược về src code
		DE-COMPILER

- Từ Misl lúc run thì biến thành machine code - binary code/native code 
				Thật gắn OS
				Chỉ dùng ngôn ngữ lập trình cấp thấp assembly để xem



